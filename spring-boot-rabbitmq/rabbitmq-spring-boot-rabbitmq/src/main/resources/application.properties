spring.application.name=rabbitmq-demo

# http服务器端口
server.port=8080

spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=rabbit
spring.rabbitmq.password=123456
spring.rabbitmq.virtual-host=/
spring.rabbitmq.template.mandatory=true
spring.rabbitmq.publisher-confirms=true
spring.rabbitmq.publisher-returns=true

# 服务Host
#spring.rabbitmq.host=${endpoint}
# 服务端口
#spring.rabbitmq.port=${port}
# 登陆用户名
#spring.rabbitmq.username=${ak}
# 登陆密码
#spring.rabbitmq.password=${sk}
# 连接到rabbitMQ的vhost
#spring.rabbitmq.virtual-host=${vhost}
# 指定client连接到的server的地址，多个以逗号分隔(优先取addresses，然后再取host)
# spring.rabbitmq.addresses
# 指定心跳超时，单位秒，0为不指定；默认60s
# spring.rabbitmq.requested-heartbeat
# 是否启用【发布确认】
#spring.rabbitmq.publisher-confirms=true
# 是否启用【发布返回】
#spring.rabbitmq.publisher-returns=true
# 连接超时，单位毫秒，0表示无穷大，不超时
#spring.rabbitmq.connection-timeout
# ssl
# 是否支持ssl
#spring.rabbitmq.ssl.enabled
# 指定持有SSL certificate的key store的路径
#spring.rabbitmq.ssl.key-store
# 指定访问key store的密码
#spring.rabbitmq.ssl.key-store-password
# 指定持有SSL certificates的Trust store
#spring.rabbitmq.ssl.trust-store
# 指定访问trust store的密码
#spring.rabbitmq.ssl.trust-store-password
# ssl使用的算法，例如，TLSv1.1
#spring.rabbitmq.ssl.algorithm

# cache
# 缓存中保持的channel数量
#spring.rabbitmq.cache.channel.size
# 当缓存数量被设置时，从缓存中获取一个channel的超时时间，单位毫秒；如果为0，则总是创建一个新channel
#spring.rabbitmq.cache.channel.checkout-timeout
# 缓存的连接数，只有是CONNECTION模式时生效
#spring.rabbitmq.cache.connection.size
# 连接工厂缓存模式：CHANNEL 和 CONNECTION
#spring.rabbitmq.cache.connection.mode

# listener
# 是否启动时自动启动容器
#spring.rabbitmq.listener.simple.auto-startup
# 表示消息确认方式，其有三种配置方式，分别是none、manual和auto；默认auto
#spring.rabbitmq.listener.simple.acknowledge-mode
#  最小的消费者数量
#spring.rabbitmq.listener.simple.concurrency
#  最大的消费者数量
#spring.rabbitmq.listener.simple.max-concurrency
# 指定一个请求能处理多少个消息，如果有事务的话，必须大于等于transaction数量.
#spring.rabbitmq.listener.simple.prefetch
# 指定一个事务处理的消息数量，最好是小于等于prefetch的数量.
#spring.rabbitmq.listener.simple.transaction-size
# 决定被拒绝的消息是否重新入队；默认是true（与参数acknowledge-mode有关系）
#spring.rabbitmq.listener.simple.default-requeue-rejected
# 多少长时间发布空闲容器时间，单位毫秒
#spring.rabbitmq.listener.simple.idle-event-interval
# 监听重试是否可用
#spring.rabbitmq.listener.simple.retry.enabled
# 最大重试次数
#spring.rabbitmq.listener.simple.retry.max-attempts
#  第一次和第二次尝试发布或传递消息之间的间隔
#spring.rabbitmq.listener.simple.retry.initial-interval
# 应用于上一重试间隔的乘数
#spring.rabbitmq.listener.simple.retry.multiplier
# 最大重试时间间隔
#spring.rabbitmq.listener.simple.retry.max-interval
# 重试是有状态or无状态
#spring.rabbitmq.listener.simple.retry.stateless


# template
# 启用强制信息；默认false
#spring.rabbitmq.template.mandatory
# receive() 操作的超时时间
#spring.rabbitmq.template.receive-timeout
# sendAndReceive() 操作的超时时间
#spring.rabbitmq.template.reply-timeout
# 发送重试是否可用
#spring.rabbitmq.template.retry.enabled
# 最大重试次数
#spring.rabbitmq.template.retry.max-attempts
#  第一次和第二次尝试发布或传递消息之间的间隔
#spring.rabbitmq.template.retry.initial-interval
# 应用于上一重试间隔的乘数
# spring.rabbitmq.template.retry.multiplier
# 最大重试时间间隔
#spring.rabbitmq.template.retry.max-interval:
